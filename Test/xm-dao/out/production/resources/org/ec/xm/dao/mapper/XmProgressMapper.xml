<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.ec.xm.dao.mapper.XmProgressMapper">
  <resultMap id="BaseResultMap" type="org.ec.xm.entity.XmProgress">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="organization_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="user_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="task_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="created_at" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="updated_at" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="content" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
    </constructor>
  </resultMap>
  <delete id="delteFromProgress" parameterType="java.lang.Integer">
    delete from xm_progress where task_id=#{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from xm_progress
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.ec.xm.entity.XmProgress">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into xm_progress (organization_id, user_id, task_id, 
      created_at, updated_at, content
      )
    values (#{organizationId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{taskId,jdbcType=INTEGER}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="org.ec.xm.entity.XmProgress">
    update xm_progress
    set organization_id = #{organizationId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      task_id = #{taskId,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, organization_id, user_id, task_id, created_at, updated_at, content
    from xm_progress
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, organization_id, user_id, task_id, created_at, updated_at, content
    from xm_progress
  </select>
  <select id="selectTaskId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, organization_id, user_id, task_id, created_at, updated_at, content
    from xm_progress
    where task_id = #{task_id,jdbcType=INTEGER} order BY id DESC LIMIT 1
  </select>

  <select id="selectProgressByTaskId" parameterType="Map" resultType="Map">
    select id, organization_id, user_id, task_id, created_at, updated_at, content
    from xm_progress
    where task_id = #{taskId,jdbcType=INTEGER} or task_id =  #{superiorTaskId,jdbcType=INTEGER}
    order BY updated_at DESC LIMIT 5
  </select>

  <select id="selectAllByTaskId" parameterType="Map" resultType="Map">
    select id, organization_id, user_id, task_id, created_at, updated_at, content
    from xm_progress
    where task_id = #{task_id,jdbcType=INTEGER} or task_id =  #{organization_id,jdbcType=INTEGER} or task_id =  #{user_id,jdbcType=INTEGER}
    order BY updated_at DESC
    limit #{page,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>

  <!--市级展示所有-->
  <select id="selectTaskAllDynamicCounts" parameterType="Map" resultType="java.lang.Integer">
    SELECT
   count(1)
    FROM
        xm_progress
    WHERE
    <if test="size != 0">
        (xm_progress.task_id IN (
            SELECT
                id
            FROM
                xm_task
            WHERE
                xm_task.superior_task_id = #{task_id,jdbcType=INTEGER}
            AND
    <foreach collection="list" item="item" open="("  close=")"  separator=" or ">
      organization_id =#{item.organizationId}
    </foreach>
              )
        )
    or
    </if>
    xm_progress.task_id= #{task_id,jdbcType=INTEGER}
  </select>
  <select id="selectTaskAllDynamic" parameterType="Map" resultType="Map">
    SELECT
    id, organization_id, user_id, task_id, created_at, updated_at, content
    FROM
    xm_progress
    WHERE
    <if test="size != 0">
    (xm_progress.task_id IN (
    SELECT
    id
    FROM
    xm_task
    WHERE
    xm_task.superior_task_id = #{task_id,jdbcType=INTEGER}
    AND
    <foreach collection="list" item="item" open="("  close=")"  separator=" or ">
      organization_id =#{item.organizationId}
    </foreach>
    )
    )
    or
    </if>
    xm_progress.task_id= #{task_id,jdbcType=INTEGER}
    ORDER BY updated_at DESC
    limit #{page,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>
<!--市级基础展示-->
  <select id="selectTaskDynamicLimit5" parameterType="Map" resultType="Map">
    SELECT
    id, organization_id, user_id, task_id, created_at, updated_at, content
    FROM
    xm_progress
    WHERE
    <if test="size != 0">
    (xm_progress.task_id IN (
    SELECT
    id
    FROM
    xm_task
    WHERE
    xm_task.superior_task_id = #{task_id,jdbcType=INTEGER}
    AND
    <foreach collection="list" item="item" open="("  close=")"  separator=" or ">
      organization_id =#{item.organizationId}
    </foreach>
    )
    )
    or
    </if>
    xm_progress.task_id= #{task_id,jdbcType=INTEGER}
    ORDER BY updated_at DESC
    LIMIT 5
  </select>


<!--区县-->
  <select id="selectDistinctTaskAllDynamic" parameterType="Map" resultType="Map">
    SELECT
    id, organization_id, user_id, task_id, created_at, updated_at, content
    FROM
    xm_progress
    WHERE
    <if test="size != 0">
    (xm_progress.task_id IN (
    SELECT
    id
    FROM
    xm_task
    WHERE
    xm_task.superior_task_id = #{task_id,jdbcType=INTEGER}
    AND
    <foreach collection="list" item="item" open="("  close=")"  separator=" or ">
      organization_id =#{item.organizationId}
    </foreach>
    )
    )
    or
    </if>
    xm_progress.task_id= #{task_id,jdbcType=INTEGER}
    or xm_progress.task_id= #{organization_id,jdbcType=INTEGER}
    ORDER BY updated_at DESC
    limit #{page,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>
  <select id="selectDistinctTaskAllDynamicCounts" parameterType="Map" resultType="java.lang.Integer">
    SELECT
    count(1)
    FROM
    xm_progress
    WHERE
    <if test="size != 0">
    (xm_progress.task_id IN (
    SELECT
    id
    FROM
    xm_task
    WHERE
    xm_task.superior_task_id = #{task_id,jdbcType=INTEGER}
    AND
    <foreach collection="list" item="item" open="("  close=")"  separator=" or ">
      organization_id =#{item.organizationId}
    </foreach>
    )
    )
    or
    </if>
    xm_progress.task_id= #{task_id,jdbcType=INTEGER}
    or xm_progress.task_id= #{organization_id,jdbcType=INTEGER}
  </select>
  <!--区县基础展示-->
  <select id="selectDistinctTaskDynamicLimit5" parameterType="Map" resultType="Map">
    SELECT
    id, organization_id, user_id, task_id, created_at, updated_at, content
    FROM
    xm_progress
    WHERE
    <if test="size != 0">
    (xm_progress.task_id IN (
    SELECT
    id
    FROM
    xm_task
    WHERE
    xm_task.superior_task_id = #{task_id,jdbcType=INTEGER}
    AND
    <foreach collection="list" item="item" open="("  close=")"  separator=" or ">
      organization_id =#{item.organizationId}
    </foreach>
    )
    )
    or
    </if>
    xm_progress.task_id= #{task_id,jdbcType=INTEGER}
    or xm_progress.task_id= #{superior_task_id,jdbcType=INTEGER}
    ORDER BY updated_at DESC
    limit 5
  </select>

  <select id="selectSubAllByTaskId" parameterType="Map" resultType="Map">
    select id, organization_id, user_id, task_id, created_at, updated_at, content
    from xm_progress
    where task_id in (select id from xm_task where xm_task.organization_id=#{organization_id,jdbcType=INTEGER}
    and xm_task.superior_task_id = #{task_id,jdbcType=INTEGER})
    order BY updated_at DESC
    limit  #{page,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>

  <!--组织选择框-->
  <select id="selectSubTaskDynamic" parameterType="Map" resultType="Map">
    select id, organization_id, user_id, task_id, created_at, updated_at, content
    from xm_progress
    where task_id in (select id from xm_task where xm_task.organization_id=#{organization_id,jdbcType=INTEGER}
    and xm_task.superior_task_id = #{task_id,jdbcType=INTEGER})
    order BY updated_at DESC
    limit  #{page,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>
  <select id="selectSubTaskDynamicCounts" parameterType="Map" resultType="java.lang.Integer">
    select
    count(1)
    from xm_progress
    where task_id in (select id from xm_task where xm_task.organization_id=#{organization_id,jdbcType=INTEGER}
    and xm_task.superior_task_id = #{task_id,jdbcType=INTEGER})
  </select>



  <select id="getDynamicCounts"  parameterType="Map" resultType="java.lang.Integer">
    SELECT
    count(1)
    FROM
    xm_progress
    WHERE xm_progress.task_id=#{task_id,jdbcType=INTEGER} or xm_progress.task_id=#{organization_id,jdbcType=INTEGER}
  </select>

  <select id="getDynamicSubCounts"  parameterType="java.lang.Integer" resultType="java.lang.Integer">
     SELECT
    count(1)
    FROM
    xm_progress
    WHERE xm_progress.task_id in (select id from xm_task where xm_task.organization_id=#{organization_id,jdbcType=INTEGER})
  </select>

  <select id="getOrganization" parameterType="java.lang.Integer" resultType="java.lang.String">
    select ge_organization.`name`
    from ge_organization
    where ge_organization.id = #{id, jdbcType=INTEGER}
  </select>

  <select id="getProgressUserName" parameterType="java.lang.Integer" resultType="java.lang.String">
   SELECT ge_user.`name` from ge_user
    where id= #{user_id, jdbcType=INTEGER}
  </select>

  <resultMap id="SubordinateResultMap" type="org.ec.xm.dto.XM0205.XM0205A11DTO">
    <result column="id" property="organizationId" />
    <result column="name" property="name" />
  </resultMap>

  <select id="getSubordinateName" parameterType="java.lang.Integer" resultMap="SubordinateResultMap">
    select ge_organization.`name`,ge_organization.id from ge_organization
        where parent_id= #{organization_id, jdbcType=INTEGER}
  </select>

  <resultMap id="SubordinateSchoolResultMap" type="org.ec.xm.dto.XM0209.XM0209A14DTO">
    <result column="id" property="organizationId" />
    <result column="name" property="name" />
  </resultMap>

  <select id="getSubordinateSchoolName" parameterType="java.lang.Integer" resultMap="SubordinateSchoolResultMap">
    select ge_organization.`name`,ge_organization.id from ge_organization
        where parent_id= #{organization_id, jdbcType=INTEGER}
  </select>


</mapper>